@startuml class
title クラス図（詳細版）

class "App\nアプリケーションのメインクラス" as App{
    省略
    run() -> void\nメインの処理
}

package "全体に影響を与えるクラス" as GlobalPackage{
    class "ErrorLog\nエラーログに関するクラス" as ErrorLog{
        simple_logger: logging.Logger\n基本的な情報のみを出力するロガー
        detailed_logger: logging.Logger\n詳細な情報を出力するロガー
        __init__() -> void\nコンストラクタ
        _output_error_log() -> None\nログに出力する処理
        create_error_log() -> "ErrorLog"\nErrorLogのインスタンス化を行う関数
        output_error_log(error_log_instance: "ErrorLog", e: Exception, is_popup: bool = True) -> None\nエラーログの出力を行う関数
        error_popup(e: Exception, is_output_error_log: bool) -> None\nエラー発生ポップアップの作成
        decorator(func: callable) -> callable\nエラーログを作成するデコレータ関数
    }

    class "Fn\n自作関数クラス" as Fn{
        sleep(ms: int) -> None\n指定された時間だけプログラムを一時停止
        log(*text: str) -> None\nログの表示
        time_log(*text: str) -> None\nログと現在時刻の表示
        check_number_string(value: str) -> bool\n数字文字列かどうかを判定する
        delete_file(file_path: str) -> None\nファイルを削除する
        move_file(source_file_path: str, target_file_path: str) -> None\nファイルを移動する
        get_now_file_base_name() -> str\nファイルのベース名用現在時刻の取得
        save_text_file(text_list: List[str], file_path:str) -> None\nテキストファイルへの保存
        get_max_file_name(dir_path: str) -> str\n辞書順で最大のファイル名を取得
        get_history_file_name_list() -> List[str]\n履歴ファイル名のリストを取得
        get_history_file_time_list(history_file_name_list:List[str]) -> List[str]\n履歴ファイル日時のリストを取得
        delete_unique_history_file() -> None\n翻訳前、後画像の両方が存在しない履歴ファイルを削除
        delete_tmp_history_file() -> None\n翻訳処理中に一時保存する画像ファイルを削除
        search_dict_in_list(lst: List[Dict], key_name: str, value: Any) -> Dict\n与えられたリスト内の辞書から指定したキーと値に一致する辞書を取得
        check_file_limits(directory_path: str, max_file_size_mb: int, max_file_count: int, max_file_retention_days: int) -> Dict[str, bool]\n指定された制限を超えているかどうかをチェックして結果を返すメソッド
        convert_time_from_filename(file_name:str) -> str\nファイル名から日時を取得
        convert_filename_from_time(file_time: str) -> str\n日時からファイル名を取得
        command_run(command_list: List[str], file_path: Optional[str] = None) -> None\n与えられたコマンドのリストを実行する
        get_script_directory_path() -> str\n現在のスクリプトファイルが存在するディレクトリのパスを取得する処理
        create_aws_file() -> None\nAWSの空の設定ファイルを作成する処理
    }

    class "GlobalStatus\nグローバル変数保存用クラス" as GlobalStatus{
        win_instance: Optional["BaseWin"] = None\n現在開いているウィンドウクラスのインスタンス
        is_main_thread_running: bool = True\nメインスレッドが実行中かどうか
        is_sub_thread_error: bool = False\nサブスレッドでエラーが発生したかどうか
        sub_thread_error_message: str = ""\nサブスレッドでエラー発生時の表示エラーメッセージ
    }

    class "SystemSetting\nユーザーが変更不可能の設定クラス" as SystemSetting{
        debug: bool = True \nデバッグモードかどうか
        image_file_extension: str = ".png"\n画像ファイル形式
        package_path: str\nパッケージディレクトリパス
        app_name: str = "ヤクミャクコンジャック"\nアプリ名
        ocr_soft_list = ["AmazonTextract", "EasyOCR"]\nOCRソフトの名前のリスト
        translation_soft_list = ["AmazonTranslate", "GoogleTranslator"]\n翻訳ソフトの名前のリスト
        local_ocr_soft_list = ["EasyOCR"]\nローカル上で動作するOCRソフトの名前のリスト
        local_translation_soft_list = []\nローカル上で動作する翻訳ソフトの名前のリスト
        translation_thread_max: int = 4\n翻訳スレッドの最大数
        ocr_min_confidence_score = 0.2\nテキスト検出精度の最小許容値
        language_list: List[Dict[str,str]]\n言語情報一覧リスト
        easy_ocr_update_language_code: Dict[str, str]\nEasyOCR用の言語コード
        easy_ocr_language_list: List[Dict[str, str]]\nEasyOCR用言語情報一覧リスト

        その他ディレクトリ、ファイルパス省略
    }

    class "UserSetting\nユーザーが変更可能の設定クラス" as UserSetting{
        default_user_setting: dict\nデフォルトの設定
        setting: dict\njsonファイルから読み込んだ設定

        setting省略
        __init__() -> None\nコンストラクタ
        get_setting(key: str) -> str\n設定を取得する
        get_all_setting() -> dict\n設定を全て取得する
        create_setting_file() -> dict\n設定ファイルを新規作成して辞書として返す
        load_setting_file() ->dict\n設定ファイルを読み込み辞書として返す
        save_setting_file(update_setting: dict) -> None\n現在の設定を更新してjsonファイルに保存する
        check_access_aws_service()\nAWSサービスにアクセス可能か確認する処理
    }

    '依存関係（Dependency）
    Fn <.. UserSetting

    GlobalStatus <.. ErrorLog
    GlobalStatus <.. UserSetting

    SystemSetting <.. ErrorLog
    SystemSetting <.. Fn
    SystemSetting <.. UserSetting
}

package "ウィンドウ関連のクラス" as WindowPackage{
    class "BaseWin\nウィンドウの基本クラス" as BaseWin{
        __init__() -> None\nコンストラクタ
        start_win() -> None\nウィンドウ開始処理
        get_layout() -> List[Any]\nウィンドウレイアウト作成処理
        make_win() -> "PySimpleGUI.Window"\nGUIウィンドウ作成処理
        get_base_window_args() -> Dict[str, Any]\n基本となるGUIウィンドウで設定する引数の辞書の取得
        event_start() -> None\nイベント受付開始処理
        exit_event() -> None\nイベント終了処理
        base_event(, event: str, values: Dict[str, Any]) -> bool\n共通のイベントの処理
        end_win() -> None\nウィンドウ終了処理
        get_transition_target_win() -> str\n遷移先ウィンドウ名の取得
        get_is_restart_program() -> bool\n再起動するかどうかを取得する処理
        window_close() -> None\nプログラム終了イベント処理
        get_update_setting(values: Dict[str, Any]) -> Dict[str, Any]\n更新する設定の取得
        transition_to_translation_win() -> None\n翻訳画面に遷移する処理
        check_valid_number_event(window: "PySimpleGUI.Window", event: str, values: Dict[str, Any]) -> bool\n数字の入力値が有効かどうかを判定してGUI更新処理を行う処理
    }

    class "AwsConfigureWin\nAWS設定画面ウィンドウクラス" as AwsConfigureWin{
        省略
        aws_configure_thread_end_event(is_successful: bool) -> None\nAWS設定スレッドが終了した時の処理
        aws_configure_thread() -> None\nAWS設定を行うスレッド
    }

    class "CheckAccessAwsWin\nAWS接続テスト画面ウィンドウクラス" as CheckAccessAwsWin{
        省略
        progress_dot_count_update() -> None\nプロセスの進捗インジケーターの点の数を更新する処理
    }

    class "DisplaySettingWin\n表示設定画面ウィンドウクラス" as DisplaySettingWin{
        省略
        checkbox_event(values: Dict[str, Any], checkbox_event_key_list: List[str]) -> None\nチェックボックス押下イベント処理
    }

    class "EasyOcrModelDownloadWin\nEasyOCRモデルダウンロードウィンドウクラス" as EasyOcrModelDownloadWin{
        省略
        progress_message_update(message: str) -> None\nプロセスの進捗状況メッセージの更新処理
        progress_dot_count_update() -> None\nプロセスの進捗インジケーターの点の数を更新する処理
        easy_ocr_model_download() -> None\nEasyOCRモデルをダウンロードする処理
    }

    class "EnvironmentSettingWin\n環境設定画面ウィンドウクラス" as EnvironmentSettingWin{
        省略
        ocr_amazon_textract_message_event(event: str) -> None\nOCRがAmazonTextractの場合に表示するメッセージの表示と非表示を切り替える
        bat_file_event(popup_message: str, bat_file_path: str) -> None\nバッチファイルを実行するイベントの処理
    }

    class "KeySettingWin\nキー設定画面ウィンドウクラス" as KeySettingWin{
        省略
        key_event_start(event: str) -> None\nキーイベントを取得するスレッドを開始する処理
        is_duplicate(values: dict) -> bool\nキー名とスキャンコードの重複チェックを行う
        update_key_binding_view(setting_target_key: str, key_name: str, scan_code: int) -> None\nキーバインド設定の表示の更新処理
    }

    class "LanguageSettingWin\n言語設定画面ウィンドウクラス" as LanguageSettingWin{
        省略
    }

    class "SaveSettingWin\n保存設定画面ウィンドウクラス" as SaveSettingWin{
        省略
        input_text_event(event: str, values: dict) -> None\n数字の入力値が有効かどうかを判定してGUI更新処理を行う処理
    }

    class "ShootingSettingWin\n撮影設定画面ウィンドウクラス" as ShootingSettingWin{
        省略
        get_ss_region_text() -> str\n撮影範囲表示テキストの取得
        set_ss_region_event() -> None\n撮影範囲設定ボタン押下イベント処理
        input_text_event(event: str, values: dict) -> None\n数字の入力値が有効かどうかを判定してGUI更新処理を行う処理
    }

    class "ThemeSettingWin\nテーマ設定画面ウィンドウクラス" as ThemeSettingWin{
        省略
    }

    class "TranslationWin\n翻訳画面ウィンドウクラス" as TranslationWin{
        省略
        translate_thread_start() -> None\n翻訳処理を別スレッドで開始する処理
        translate_thread_end(values: dict) -> None\n翻訳処理のスレッド終了イベント処理
        move_history_tmp_file(self, file_name: str) -> None\n一時保存ファイルを履歴ファイルに保存する処理
        toggle_auto_translation_event() -> None\n自動翻訳トグルボタン押下イベント処理
        translate_timing_thread_start() -> None\n自動翻訳のタイミングを取得するスレッドの開始処理
        image_change(file_name: str) -> None\n翻訳前後画像の変更処理
        user_zoom_scale_change()->None\n利用者が変更できる拡大率の変更
        resize_and_refresh_gui() -> None\n画像のサイズを変更してウィンドウを更新する処理
        get_fit_zoom_scale(image: Image, max_size: List[int]) -> int\n画像を与えられた範囲に収まるようにするための拡大率を取得
        history_file_list_box(values: dict) -> None\n履歴ファイル選択リストボックスイベントの処理
        history_file_select_botton(key: str) -> None\n履歴ファイル選択ボタンイベントの処理
        set_ss_region_event() -> None\n撮影範囲設定ボタン押下イベント処理
        transition_progress_dot_count_update() -> None\n翻訳プロセスの進捗インジケーターの点の数を更新する処理
    }

    ' 継承（Inheritance）
    BaseWin <|-- AwsConfigureWin
    BaseWin <|-- CheckAccessAwsWin
    BaseWin <|-- DisplaySettingWin
    BaseWin <|-- EasyOcrModelDownloadWin
    BaseWin <|-- EnvironmentSettingWin
    BaseWin <|-- KeySettingWin
    BaseWin <|-- LanguageSettingWin
    BaseWin <|-- SaveSettingWin
    BaseWin <|-- ShootingSettingWin
    BaseWin <|-- ThemeSettingWin
    BaseWin <|-- TranslationWin
}

package "スレッド関連のクラス" as ThreadPackage{
    class "GetDragAreaThread\nドラッグした領域の座標を取得するスレッドクラス" as GetDragAreaThread{
        省略
    }

    class "GetKeyEventThread\nキーイベントの取得処理を行うスレッドクラス" as GetKeyEventThread{
        省略
    }

    class "TranslateThread\n翻訳処理を行うスレッドクラス" as TranslateThread{
        省略
    }

    class "TranslateTimingThread\n自動翻訳のタイミングを取得するスレッドクラス" as TranslateTimingThread{
        省略
    }

    class "WatchForKeyEventThread\n指定したキーイベントが発生するかどうか監視するスレッドクラス" as WatchForKeyEventThread{
        省略
    }
}

package "翻訳関連のクラス" as TranslationPackage{
    class "CharacterRecognition\n文字認識機能関連のクラス" as CharacterRecognition{
        get_text_data_dict(user_setting: "UserSetting", ss_file_path: str) -> list\n画像からテキスト情報を取得
        amazon_textract_ocr(ss_file_path: str) -> list\nAmazonTextractを使用して画像からテキスト情報を取得
        easy_ocr(user_setting: "UserSetting", ss_file_path: str) -> list\nEasyOCRを使用して画像からテキスト情報を取得
        remove_empty_text_data(text_data_list: list) -> None\nテキスト内容が空である要素の削除

    }

    class "ScreenshotCapture\nスクリーンショット撮影機能関連のクラス" as ScreenshotCapture{
        get_screenshot(user_setting: "UserSetting") -> None\nスクリーンショットの撮影
        save_screenshot(screenshot_image: "Image", file_name: str) -> str\nスクリーンショット画像の一時保存
    }

    class "TextTranslation\nテキスト翻訳機能関連のクラス" as TextTranslation{
        get_text_after_list(user_setting: "UserSetting", text_before_list: List[str]) -> Dict\n翻訳後テキストの取得
        amazon_translate(user_setting: "UserSetting", text_before_list: List[str]) -> Dict\nAmazonTranslateを使用して、翻訳後テキストを取得
        google_translator(user_setting: "UserSetting", text_before_list: List[str]) -> Dict\nGoogleTranslatorを使用して、翻訳後テキストを取得
    }

    class "TranslationImage\nオーバーレイ翻訳画像作成機能関連のクラス" as TranslationImage{
        get_overlay_translation_image(user_setting: "UserSetting", ss_file_path: str, text_after_list: List[str], text_region_list: Dict[str, int]) -> "Image"\nオーバーレイ翻訳画像の取得
        find_max_font_size(font_path: str, text_after_list: List[str], text_region_list: Dict[str, int]) -> List[int]\nテキストボックスに収まる最大のフォントサイズのリストの取得
        remove_empty_text_data(font_size_list: List[int], text_after_list: List[str], text_region_list: Dict[str, int]) -> None\nフォントサイズが0である要素の削除
        fill_text_box_image(draw: "ImageDraw", text_region_list: Dict[str, int]) -> None\n画像内のテキストボックスを塗りつぶす処理
        draw_text_image(draw: "ImageDraw",font_path: str, text_after_list: List[str], text_region_list: Dict[str, int], font_size_list: List[int])\n画像にテキストを描画する処理
        save_overlay_translation_image(overlay_translation_image: Image, file_name: str) -> str\nオーバーレイ翻訳画像の一時保存
    }

    class "Translation\n翻訳機能関連のクラス" as Translation{
        save_tmp_history() -> Dict\n翻訳前,結果画像を一時保存する
    }

    '集約（aggregation）
    Translation o-- CharacterRecognition
    Translation o-- ScreenshotCapture
    Translation o-- TextTranslation
    Translation o-- TranslationImage
}

'依存関係（Dependency）
GlobalPackage <.. App
GlobalPackage <.. WindowPackage
GlobalPackage <.. ThreadPackage
GlobalPackage <.. TranslationPackage

'集約（aggregation）
App o-- WindowPackage

TranslateThread o-- Translation

KeySettingWin o-- GetKeyEventThread

ShootingSettingWin o-- GetDragAreaThread

TranslationWin o-- GetDragAreaThread
TranslationWin o-- TranslateTimingThread
TranslationWin o-- TranslateThread
TranslationWin o-- WatchForKeyEventThread

'コンポジション（composition）

' 継承（Inheritance）

@enduml

@startuml class_simple
title クラス図（簡易版）

class "App\nアプリケーションのメインクラス" as App{}

package "全体に影響を与えるクラス" as GlobalPackage{
    class "ErrorLog\nエラーログに関するクラス" as ErrorLog{}

    class "Fn\n自作関数クラス" as Fn{}

    class "GlobalStatus\nグローバル変数保存用クラス" as GlobalStatus{}

    class "SystemSetting\nユーザーが変更不可能の設定クラス" as SystemSetting{}

    class "UserSetting\nユーザーが変更可能の設定クラス" as UserSetting{}

    '依存関係（Dependency）
    Fn <.. UserSetting

    GlobalStatus <.. ErrorLog
    GlobalStatus <.. UserSetting

    SystemSetting <.. ErrorLog
    SystemSetting <.. Fn
    SystemSetting <.. UserSetting
}

package "ウィンドウ関連のクラス" as WindowPackage{
    class "BaseWin\nウィンドウの基本クラス" as BaseWin{}

    class "AwsConfigureWin\nAWS設定画面ウィンドウクラス" as AwsConfigureWin{}

    class "CheckAccessAwsWin\nAWS接続テスト画面ウィンドウクラス" as CheckAccessAwsWin{}

    class "DisplaySettingWin\n表示設定画面ウィンドウクラス" as DisplaySettingWin{}

    class "EasyOcrModelDownloadWin\nEasyOCRモデルダウンロードウィンドウクラス" as EasyOcrModelDownloadWin{}

    class "EnvironmentSettingWin\n環境設定画面ウィンドウクラス" as EnvironmentSettingWin{}

    class "KeySettingWin\nキー設定画面ウィンドウクラス" as KeySettingWin{}

    class "LanguageSettingWin\n言語設定画面ウィンドウクラス" as LanguageSettingWin{}

    class "SaveSettingWin\n保存設定画面ウィンドウクラス" as SaveSettingWin{}

    class "ShootingSettingWin\n撮影設定画面ウィンドウクラス" as ShootingSettingWin{}

    class "ThemeSettingWin\nテーマ設定画面ウィンドウクラス" as ThemeSettingWin{}

    class "TranslationWin\n翻訳画面ウィンドウクラス" as TranslationWin{}

    ' 継承（Inheritance）
    BaseWin <|-- AwsConfigureWin
    BaseWin <|-- CheckAccessAwsWin
    BaseWin <|-- DisplaySettingWin
    BaseWin <|-- EasyOcrModelDownloadWin
    BaseWin <|-- EnvironmentSettingWin
    BaseWin <|-- KeySettingWin
    BaseWin <|-- LanguageSettingWin
    BaseWin <|-- SaveSettingWin
    BaseWin <|-- ShootingSettingWin
    BaseWin <|-- ThemeSettingWin
    BaseWin <|-- TranslationWin
}

package "スレッド関連のクラス" as ThreadPackage{
    class "GetDragAreaThread\nドラッグした領域の座標を取得するスレッドクラス" as GetDragAreaThread{}

    class "GetKeyEventThread\nキーイベントの取得処理を行うスレッドクラス" as GetKeyEventThread{}

    class "TranslateThread\n翻訳処理を行うスレッドクラス" as TranslateThread{}

    class "TranslateTimingThread\n自動翻訳のタイミングを取得するスレッドクラス" as TranslateTimingThread{}

    class "WatchForKeyEventThread\n指定したキーイベントが発生するかどうか監視するスレッドクラス" as WatchForKeyEventThread{}
}

package "翻訳関連のクラス" as TranslationPackage{
    class "CharacterRecognition\n文字認識機能関連のクラス" as CharacterRecognition{}

    class "ScreenshotCapture\nスクリーンショット撮影機能関連のクラス" as ScreenshotCapture{}

    class "TextTranslation\nテキスト翻訳機能関連のクラス" as TextTranslation{}

    class "TranslationImage\nオーバーレイ翻訳画像作成機能関連のクラス" as TranslationImage{}

    class "Translation\n翻訳機能関連のクラス" as Translation{}

    '集約（aggregation）
    Translation o-- CharacterRecognition
    Translation o-- ScreenshotCapture
    Translation o-- TextTranslation
    Translation o-- TranslationImage
}

'依存関係（Dependency）
GlobalPackage <.. App
GlobalPackage <.. WindowPackage
GlobalPackage <.. ThreadPackage
GlobalPackage <.. TranslationPackage

'集約（aggregation）
App o-- WindowPackage

TranslateThread o-- Translation

KeySettingWin o-- GetKeyEventThread

ShootingSettingWin o-- GetDragAreaThread

TranslationWin o-- GetDragAreaThread
TranslationWin o-- TranslateTimingThread
TranslationWin o-- TranslateThread
TranslationWin o-- WatchForKeyEventThread

'コンポジション（composition）

' 継承（Inheritance）

@enduml

